t.[] 2 .85

flex.fromSensor false

# --- TASKS --------------------------------------------------
# --- TASKS --------------------------------------------------
# --- TASKS --------------------------------------------------

# Common to both force tasks
# wave variables: damping and inverse of damping
new VectorConstant Bwave
Bwave.resize 6
Bwave.fill 0

new VectorConstant BwaveInv
BwaveInv.resize 6
BwaveInv.fill 0

# DoF selection
new MatrixConstant selecvfdof
selecvfdof.resize 6 6
selecvfdof.eye

# --- TASK FORCE ------------------------------------- 
new Add<vector> addVel
new Add<vector> addForce

new HomoToRotation waistRh
plug dyn.0 waistRh.in

new Inverse<matrixrotation> hRwaist
plug waistRh.out hRwaist.in

# convert master velocities, forces and positions to hand coordinates
new Compose<R+T> Rwt0
plug hRwaist.out Rwt0.in1
set Rwt0.in2 [3](0,0,0)
new HomoToTwist Vw
plug Rwt0.out Vw.in

new Multiply<vector,matrix> vgermanyselec
plug selecvfdof.out vgermanyselec.in2

new Multiply<vector,matrix> vgermany
plug vgermanyselec.out vgermany.in1
plug Vw.out vgermany.in2 
plug vgermany.out addVel.in1

new Multiply<vector,matrix> fgermany
plug Vw.out fgermany.in2
plug fgermany.out addForce.in1

# --- RETURN FORCE ----------------------------------- 
new Compose<R+T> 0wtR
plug waistRh.out 0wtR.in1
set 0wtR.in2 [3](0,0,0)
new HomoToTwist invVw
plug 0wtR.out invVw.in
new Multiply<vector,matrix> fsensor
plug invVw.out fsensor.in2
plug forceCompRH.torsorNullified fsensor.in1

# --- RETURN POS ------------------------------------- 
# dyn.0 = wRh. Inverse = h0Rw
new Inverse<matrixhomo>  poseInit
plug dyn.0 poseInit.in
compute poseInit.out
freeze poseInit.in

new Multiply<matrixhomo> wrtPoseInit
plug poseInit.out wrtPoseInit.in1
plug dyn.0 wrtPoseInit.in2

new HomoToRotation wRh0
plug poseInit.in wRh0.in

new EndomorphismBasis wrtPoseInitinShoulder
plug wrtPoseInit.out wrtPoseInitinShoulder.in1
plug wRh0.out wrtPoseInitinShoulder.in2

new MatrixHomoToPoseQuaternion wrtPoseInitQuat
plug wrtPoseInitinShoulder.out wrtPoseInitQuat.in

# --- RETURN VEL ------------------------------------- 
new HomoToRotation absRrh
plug wrtPoseInitinShoulder.out absRrh.in

new MatrixToQuaternion qrh
plug absRrh.out qrh.in

new Derivator<VectorQuaternion> dqrh
set dqrh.dt 200
plug qrh.out dqrh.in

new Inverse<unitquat> invqrh
plug qrh.out invqrh.in

new Multiply<quaternion> dq_q
plug dqrh.out dq_q.in1
plug invqrh.out dq_q.in2

new Multiply<vector,double> WRH
plug dq_q.out WRH.in1
set WRH.in2 2

new Selec<vector> wrh
plug WRH.out wrh.in
wrh.selec 1 4
compute wrh.out

new Selec<vector> xrh
plug wrtPoseInitQuat.out xrh.in
xrh.selec 0 3

new Derivator<Vector> dxrh
set dxrh.dt 200
plug xrh.out dxrh.in

new Stack<vector> vrh
plug dxrh.out vrh.in1
plug wrh.out vrh.in2
vrh.selec1 0 3
vrh.selec2 0 3
compute vrh.out

# --- PROCEDURES AND WAVE VARIABLES -----------------------

# wave variables (velocity)
new Substract<vector> dF
plug forceCompRH.torsorNullified dF.in1
plug fgermany.out dF.in2
new Multiply<vector> Vwave
plug BwaveInv.out Vwave.in1
plug dF.out Vwave.in2
new Add<vector> Vsd
plug vgermany.out Vsd.in1
plug Vwave.out Vsd.in2

# wave variables (force)
new Multiply<vector,matrix> vslave
plug vrh.out vslave.in1
plug Vw.out vslave.in2
new Substract<vector> dV
plug vgermany.out dV.in1
plug vslave.out dV.in2
new Multiply<vector> Fwave
plug Bwave.out Fwave.in1
plug dV.out Fwave.in2
new Add<vector> Fsd
plug fgermany.out Fsd.in1
plug Fwave.out Fsd.in2

# --- FV schemes

# basic FV scheme
proc fgermany(enable)
-> plug fgermany.out addForce.in1
-> squeeze forceInt.force addForce.in2 addForce.out
endproc

# FV scheme with wave variables
proc fgermany(enable,wave)
-> plug Fsd.out addForce.in1
-> squeeze forceInt.force addForce.in2 addForce.out
endproc

# disable FV scheme (no teleop at all)
# NOTE: disable a scheme before choosing a different one!
proc fgermany(disable)
-> plug forceCompRH.torsorNullified forceInt.force
endproc

# --- VF schemes

# basic VF scheme
proc vgermany(enable)
-> plug vgermany.out p3.errorIN
endproc

# VF scheme + wave variable
proc vgermany(enable,wave)
-> plug Vsd.out p3.errorIN
endproc

# basic VF scheme, the robot is compliant to environment forces
proc vgermany_compl(enable)
-> plug vgermany.out addVel.in1
-> squeeze p3.errorIN addVel.in2 addVel.out
endproc

# VF with wave variables, robot is compliant
proc vgermany_compl(enable,wave)
-> plug Vsd.out addVel.in1
-> squeeze p3.errorIN addVel.in2 addVel.out
endproc

# disable VF scheme (no teleop at all)
# NOTE: disable a scheme before choosing a different one!
proc vgermany(disable)
-> plug forceInt.velocity p3.errorIN
endproc


# --- TASK FORCE LEFT ------------------------------------- 
new Add<vector> addVelLH
new Add<vector> addForceLH

new HomoToRotation waistLh
plug dyn.lh waistLh.in

new Inverse<matrixrotation> lhRwaist
plug waistLh.out lhRwaist.in

# convert master velocities and positions to hand coordinates
new Compose<R+T> Rwtlh
plug lhRwaist.out Rwtlh.in1
set Rwtlh.in2 [3](0,0,0)
new HomoToTwist Vwlh
plug Rwtlh.out Vwlh.in
new Multiply<vector,matrix> vgermanyLH
plug Vwlh.out vgermanyLH.in2 
plug vgermanyLH.out addVelLH.in1
new Multiply<vector,matrix> fgermanyLH
plug Vwlh.out fgermanyLH.in2
plug fgermanyLH.out addForceLH.in1

proc fgermanyLH(enable)
-> squeeze forceIntLH.force addForceLH.in2 addForceLH.out
endproc

proc fgermanyLH(disable)
-> plug forceCompLH.torsorNullified forceIntLH.force
endproc

proc vgermanyLH(enable)
-> plug vgermanyLH.out p3LH.errorIN
endproc

proc vgermanyLH_compl(enable)
-> squeeze p3LH.errorIN addVelLH.in2 addVelLH.out
endproc

proc vgermanyLH(disable)
-> plug forceIntLH.velocity p3LH.errorIN
endproc

# --- RETURN FORCE ----------------------------------- 
new Compose<R+T> Lwt0
plug waistLh.out Lwt0.in1
set Lwt0.in2 [3](0,0,0)
new HomoToTwist invVwLH
plug Lwt0.out invVwLH.in
new Multiply<vector,matrix> fsensorLH
plug invVwLH.out fsensorLH.in2
plug forceCompLH.torsorNullified fsensorLH.in1

# --- RETURN POS ------------------------------------- 
# dyn.0 = wRh. Inverse = h0Rw
new Inverse<matrixhomo>  poseInitLH
plug dyn.lh poseInitLH.in
compute poseInitLH.out
freeze poseInitLH.in

new Multiply<matrixhomo> wrtPoseInitLH
plug poseInitLH.out wrtPoseInitLH.in1
plug dyn.lh wrtPoseInitLH.in2

new HomoToRotation wRh0LH
plug poseInitLH.in wRh0LH.in

new EndomorphismBasis wrtPoseInitinShoulderLH
plug wrtPoseInitLH.out wrtPoseInitinShoulderLH.in1
plug wRh0LH.out wrtPoseInitinShoulderLH.in2

new MatrixHomoToPoseQuaternion wrtPoseInitQuatLH
plug wrtPoseInitinShoulderLH.out wrtPoseInitQuatLH.in

# --- RETURN VEL ------------------------------------- 
new HomoToRotation absRlh
plug wrtPoseInitinShoulderLH.out absRlh.in

new MatrixToQuaternion qlh
plug absRlh.out qlh.in

new Derivator<VectorQuaternion> dqlh
set dqlh.dt 200
plug qlh.out dqlh.in

new Inverse<unitquat> invqlh
plug qlh.out invqlh.in

new Multiply<quaternion> dq_qLH
plug dqlh.out dq_qLH.in1
plug invqlh.out dq_qLH.in2

new Multiply<vector,double> WLH
plug dq_qLH.out WLH.in1
set WLH.in2 2

new Selec<vector> wlh
plug WLH.out wlh.in
wlh.selec 1 4
compute wlh.out

new Selec<vector> xlh
plug wrtPoseInitQuatLH.out xlh.in
xlh.selec 0 3

new Derivator<Vector> dxlh
set dxlh.dt 200
plug xlh.out dxlh.in

new Stack<vector> vlh
plug dxlh.out vlh.in1
plug wlh.out vlh.in2
vlh.selec1 0 3
vlh.selec2 0 3
compute vlh.out


# --- TASK HEAD ------------------------------------- 
new Selec<vector> posHead
plug OpenHRP.state posHead.in
posHead.selec 20 22

new FeatureGeneric featureHead
new FeatureGeneric featureHeadDes
set featureHead.jacobianIN [2,36]((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
plug posHead.out featureHead.errorIN 
set featureHead.sdes featureHeadDes
new Task taskHead
taskHead.add featureHead
set taskHead.controlGain .8

taskHead.unselec :
taskHead.selec 14:15

# Neck limitation
new NeckLimitation necklimit
necklimit.rank 0 1
plug necklimit.jointLimited featureHeadDes.errorIN

new GainAdaptive gainHead
gainHead.set 10 .1 100
plug taskHead.error gainHead.error
plug gainHead.gain taskHead.controlGain


# --- TASK NEW HEAD
new VectorToRotation Rdes_head
set Rdes_head.in [2](-0,-0)
Rdes_head.size 2
Rdes_head.axis 0 Z
Rdes_head.axis 1 Y

new Compose<R+T> Mdes_head
plug Rdes_head.out Mdes_head.in1
set Mdes_head.in2 [3](0,0,1.5)

dyn.createOpPoint head 16

new FeaturePoint6d phead
new FeaturePoint6d pheadd

plug dyn.head phead.position
plug dyn.Jhead phead.Jq
plug Mdes_head.out pheadd.position
set phead.sdes pheadd
phead.frame current
# set phead.selec 111000
set phead.selec 111000

new Task taskHeadWB
taskHeadWB.add phead
set taskHeadWB.controlSelec 1100000000000000
# set taskHeadWB.controlSelec 1111000000000000
set taskHeadWB.controlGain .3

new GainAdaptive gainHeadWB
gainHeadWB.set 10 .1 100
plug taskHeadWB.error gainHeadWB.error
plug gainHeadWB.gain taskHeadWB.controlGain


# --- GRIPER ------------------------------------- 
plug OpenHRP.ptorque gripdes.torqueFullIN
OpenHRP.withPseudoTorque 1

set gripdes.position [2](.3,.3)

# --- Joint limit
new VectorConstant protectJl
protectJl.resize 36
protectJl.fill 0.97

new Multiply<vector> upperJl
plug protectJl.out upperJl.in2 

new Multiply<vector> lowerJl
plug protectJl.out lowerJl.in2 

squeeze jointlimit.upperJl upperJl.in1 upperJl.out
squeeze jointlimit.lowerJl lowerJl.in1 lowerJl.out

set taskJl.controlGain 2


# --- SOT --------------------------------------------------
# --- SOT --------------------------------------------------
# --- SOT --------------------------------------------------

sot.clear
sot.clearConstraint
sot.push taskHeadWB

plug sot.control controlsmall.in1
set sot.damping 1e-2

# --- COM
set featureComDes.errorIN [3](0.0294045,-0.0936384,0.7)
new GainAdaptive gainCom
gainCom.set .1 .1 30
plug taskCom.error gainCom.error
plug gainCom.gain taskCom.controlGain

# --- GOINIT -----------------------------------------------

proc resetinit()
-> plug dyn.0 poseInit.in
-> sleep 1
-> freeze poseInit.in
endproc

# --- PROC --------------------------------------------------

proc urg
-> plug zeroCom.out controlsmall.in1
endproc

proc endOfUrg
-> plug sot.control controlsmall.in1
-> zeroCom.fill 0
endproc

proc xpstart
-> sot.push taskForce
-> sot.push taskForceLH
-> fgermany(enable)
-> fgermanyLH(enable)
endproc

proc upperbody
-> sot.clear
-> sot.clearConstraint
-> sot.push taskForce
-> sot.push taskForceLH
-> sot.push taskHeadWB
-> set taskForce.controlSelec   1111110000000000000000
-> set taskForceLH.controlSelec 11111100000000000000000000000
endproc

proc wholebody
-> sot.clear
-> sot.clearConstraint
-> sot.push taskTwofeet
-> sot.addConstraint legs
-> sot.push taskCom
-> sot.push taskForce
-> sot.push taskForceLH
-> sot.push taskHeadWB
-> set taskForce.controlSelec ...1
-> set taskForceLH.controlSelec ...1
-> set featureCom.selec 011
-> sot.gradient taskJl
endproc

# --- IN SIMU 
# --- IN SIMU 
# --- IN SIMU 
# set forceCompRH.precompensation [6](0,0,0,0,0,0)
# set forceCompRH.handRsensor [3,3]((0,-1,0),(1,0,0),(0,0,1))
# set forceCompRH.sensorCom [3](0,0,-0.05)
# set forceCompRH.gravity [6](0.000000,0.000000,-11.2345,0.000000,0.000000,0.000000)
# set forceCompRH.gain [6,6]((1,0,0,0,0,0),(0,1,0,0,0,0),(0,0,1,0,0,0),(0,0,0,1,0,0),(0,0,0,0,1,0),(0,0,0,0,0,1))

# Position COM [-0.0041   -0.0012    0.1071]
# Position Sensor [ 0.005 0   -0.05925 ]
# Sensor->com -0.0009    0.0012   -0.0479
# set forceCompRH.sensorCom [3](-0.0009,0.0012,-0.0479)
# After "calibration" 
# set forceCompRH.sensorCom [3](-0.0009,0.000,-0.03428)

# set forceCompRH.gravity [6](0.000000,0.000000,-0,0.000000,0.000000,0.000000)

# ----
flex.fromSensor false


# --- DEBUG --------------------------------------------------

# new Stack<vector> forceOnly
# forceOnly.selec1 0 3
# forceOnly.selec2 0 3
# set forceOnly.in2 [3](0,0,0)
# set forceOnly.in1 [3](0,0,0)

# set friction.in [6](150,150,150,3,3,3)
set friction.in [6](180,180,180,5,5,5)

# set p3.errorIN [6](0,0,0,0,0,0)
# set friction.in [6](150,150,150,2,2,2)

# OpenHRP.periodicCall addSignal necklimit.jointLimited

# plug massRH.massInverse forceIntLH.massInverse
# 

# proc show
# -> get forceIntLH.force
# -> get forceIntLH.velocity
# -> get forceInt.force
# -> get forceInt.velocity
# endproc
# 

# set taskForceLH.controlSelec 11111100000000000000000000000



