# ----------------------------------------------------------------
# --- Features of the tasks to blend -----------------------------
# ----------------------------------------------------------------

# --- Right hand ---

# Task: relative position of the right hand wrt the waist.
new FeaturePoint6dRelative p6rel_rh
plug dyn.J0 p6rel_rh.Jq
plug dyn.JWaist p6rel_rh.JqRef
plug dyn.0 p6rel_rh.position
plug dyn.Waist p6rel_rh.positionRef

new FeaturePoint6dRelative p6rel_rh_des
p6rel_rh.initSdes p6rel_rh_des
set p6rel_rh.sdes p6rel_rh_des

plug dyn.0 p6rel_rh_des.position
plug dyn.Waist p6rel_rh_des.positionRef

# --- Left hand ---

# Task: relative position of the right hand wrt the waist.
new FeaturePoint6dRelative p6rel_lh
plug dyn.Jlh p6rel_lh.Jq
plug dyn.JWaist p6rel_lh.JqRef
plug dyn.lh p6rel_lh.position
plug dyn.Waist p6rel_lh.positionRef

new FeaturePoint6dRelative p6rel_lh_des
p6rel_lh.initSdes p6rel_lh_des
set p6rel_lh.sdes p6rel_lh_des

plug dyn.lh p6rel_lh_des.position
plug dyn.Waist p6rel_lh_des.positionRef

# proc zeroclampworkspace
# -> plug dyn.0 p6rel_rh_des.position
# -> freeze p6rel_rh_des.position
# -> plug dyn.Waist p6rel_rh_des.positionRef
# -> freeze p6rel_rh_des.positionRef
# -> plug dyn.lh p6rel_lh_des.position
# -> freeze p6rel_lh_des.position
# -> plug dyn.Waist p6rel_lh_des.positionRef
# -> freeze p6rel_lh_des.positionRef
# endproc

proc zeroclampworkspace
-> plug href_rh.out p6rel_rh_des.position
-> plug href_lh.out p6rel_lh_des.position
endproc

# I cannot sum two features with different dimensions.
# TODO: find a solution!
set p6rel_rh.selec 111111
set p6rel_lh.selec 111111
set p3.selec 111111
set p3LH.selec 111111


# ----------------------------------------------------------------
# --- Blending parameter -----------------------------------------
# ----------------------------------------------------------------

# --- Right hand ---

new ClampWorkspace hparam
hparam.beta 1.2
hparam.mode 2
hparam.bounds 0.15 0.4 -0.45 -0.17 0.2 0.45
hparam.theta_min -20
hparam.theta_max 20
hparam.frame point
plug dyn.0 hparam.position
plug dyn.Waist hparam.positionref

new Multiply<matrixhomo> href_rh
plug dyn.Waist href_rh.in1
plug hparam.ref href_rh.in2

# --- Left Hand ---

new ClampWorkspace hparam_lh
hparam_lh.beta 1.2
hparam_lh.mode 2
hparam_lh.bounds 0.15 0.4 0.17 0.45 0.2 0.45
hparam_lh.theta_min -20
hparam_lh.theta_max 20
hparam_lh.frame point
plug dyn.lh hparam_lh.position
plug dyn.Waist hparam_lh.positionref

new Multiply<matrixhomo> href_lh
plug dyn.Waist href_lh.in1
plug hparam_lh.ref href_lh.in2


# ----------------------------------------------------------------
# --- Task lead and follow ---------------------------------------
# ----------------------------------------------------------------

# --- Right Hand ---

# gain of the leader and follower controllers
new GainAdaptive glead
glead.setConstant 1
plug p6rel_rh.error glead.error

new GainAdaptive gfollow
gfollow.setConstant 1
plug p3.error gfollow.error

# does the job of a task :) multiplies the error by the gain.
new Multiply<vector,double> tasklead
plug p6rel_rh.error tasklead.in1
plug glead.gain tasklead.in2

new Multiply<vector,double> taskfollow
plug p3.error taskfollow.in1
plug gfollow.gain taskfollow.in2

# finally apply the weight to the lead and follow tasks...
new Multiply<vector,matrix> lead
plug hparam.alpha lead.in2
plug tasklead.out lead.in1

new Multiply<vector,matrix> follow
plug hparam.alphabar follow.in2
plug taskfollow.out follow.in1

# ... and add the weighted tasks.
new Add<vector> ui
plug lead.out ui.in1
plug follow.out ui.in2

# --- Left Hand ---

# gain of the leader and follower controllers
new GainAdaptive glead_lh
glead_lh.setConstant 1
plug p6rel_lh.error glead_lh.error

new GainAdaptive gfollow_lh
gfollow_lh.setConstant 1
plug p3LH.error gfollow_lh.error

# does the job of a task :) multiplies the error by the gain.
new Multiply<vector,double> tasklead_lh
plug p6rel_lh.error tasklead_lh.in1
plug glead_lh.gain tasklead_lh.in2

new Multiply<vector,double> taskfollow_lh
plug p3LH.error taskfollow_lh.in1
plug gfollow_lh.gain taskfollow_lh.in2

# finally apply the weight to the lead and follow tasks...
new Multiply<vector,matrix> lead_lh
plug hparam_lh.alpha lead_lh.in2
plug tasklead_lh.out lead_lh.in1

new Multiply<vector,matrix> follow_lh
plug hparam_lh.alphabar follow_lh.in2
plug taskfollow_lh.out follow_lh.in1

# ... and add the weighted tasks.
new Add<vector> ui_lh
plug lead_lh.out ui_lh.in1
plug follow_lh.out ui_lh.in2


# ----------------------------------------------------------------
# --- Homotopy task ----------------------------------------------
# ----------------------------------------------------------------

# --- Right hand ---

# Then all we have to do is define a feature and a task, and plug
# the output of ui, set a gain of -1 and we have our homotopy-based
# controller.
new FeatureGeneric phomotopy
plug dyn.J0 phomotopy.jacobianIN

new Task thomotopy
thomotopy.add phomotopy

set phomotopy.selec 111111
set phomotopy.sdes
plug ui.out phomotopy.errorIN
set thomotopy.controlGain -1
phomotopy.dimDefault 6

# --- Left Hand ---

# Then all we have to do is define a feature and a task, and plug
# the output of ui, set a gain of -1 and we have our homotopy-based
# controller.
new FeatureGeneric phomotopy_lh
plug dyn.Jlh phomotopy_lh.jacobianIN

new Task thomotopy_lh
thomotopy_lh.add phomotopy_lh

set phomotopy_lh.selec 111111
set phomotopy_lh.sdes
plug ui_lh.out phomotopy_lh.errorIN
set thomotopy_lh.controlGain -1
phomotopy_lh.dimDefault 6
