# Olivier Stasse
# 2009-02
# 
debugtrace true
# ------------------------------------------------------------
# Modify the origin to ensure continuity with and w/ the walk.
# ------------------------------------------------------------
new Inverse<matrixhomo> lfo_H_pg
plug pg.initleftfootref lfo_H_pg.in
compute lfo_H_pg.out
freeze lfo_H_pg.in


# ---- Previous Version : Based on the 
# ---- waist position reference.
# new Compose<RPY+T> pg_H_wa
# plug pg.waistpositionabsolute pg_H_wa.in2
# plug pg.waistattitudeabsolute pg_H_wa.in1

# ---- New Version : Based on the 
# ---- support foot position reference.

new Selector SupportFootSelec
SupportFootSelec.reset 2 2

SupportFootSelec.create matrixHomo pg_H_sf 0
plug pg.rightfootref SupportFootSelec.pg_H_sf0
plug pg.leftfootref SupportFootSelec.pg_H_sf1

SupportFootSelec.create matrixHomo wa_H_sf 1
plug dyn2.rleg SupportFootSelec.wa_H_sf0
plug dyn2.lleg SupportFootSelec.wa_H_sf1

plug pg.SupportFoot SupportFootSelec.selec

new Inverse<matrixhomo> sf_H_wa
plug SupportFootSelec.wa_H_sf sf_H_wa.in

new Multiply<matrixhomo> pg_H_wa
plug SupportFootSelec.pg_H_sf pg_H_wa.in1
plug sf_H_wa.out pg_H_wa.in2

# --- Common part for specifying free flyer.

new Multiply<matrixhomo> lfo_H_wa
plug lfo_H_pg.out lfo_H_wa.in1
plug pg_H_wa.out lfo_H_wa.in2
     		 
new MatrixHomoToPoseRollPitchYaw ffpos_from_pg
plug lfo_H_wa.out ffpos_from_pg.in

# --- Pass the dyn from ref left_foot to ref pg.
plug ffpos_from_pg.out dyn.ffposition

# --- Extract pose and attitude from ffpos 

new Selec<vector> ffattitude_from_pg
plug ffpos_from_pg.out ffattitude_from_pg.in
ffattitude_from_pg.selec 3 6

new Selec<vector> ffposition_from_pg
plug ffpos_from_pg.out ffposition_from_pg.in
ffposition_from_pg.selec 0 3


# --- Now compute the ZMP ref in the Waist reference frame.

new Multiply<vector,matrixHomo> lfo_H_zmp
plug pg.zmpref lfo_H_zmp.in1
plug lfo_H_pg.out lfo_H_zmp.in2


new Inverse<matrixhomo> wa_H_lfo
plug lfo_H_wa.out wa_H_lfo.in

new Multiply<vector,matrixHomo> wa_H_zmp
plug lfo_H_zmp.out wa_H_zmp.in1
plug wa_H_lfo.out wa_H_zmp.in2

# --- And reconnect the ZMPref to OpenHRP in the new reference frame.

pg.initState

# Those two lines needs some time
# to make sure the robot takes into account nicely 
# the new reference.
plug pg.zmpref OpenHRP.zmp
# plug pg.waistattitude OpenHRP.attitudeIN
plug ffattitude_from_pg.out OpenHRP.attitudeIN
unplug OpenHRP.zmp
pg.parsecmd :SetZMPFrame world
plug wa_H_zmp.out OpenHRP.zmp

# --- 
# --- Last init and you can go.

